define(["require", "exports", "../Shared/Timed", "./TuckmanZones", "../Shared/Point"], function (require, exports, Timed_1, TuckmanZones_1, Point_1) {
    "use strict";
    var GraphTuckmanBase = (function () {
        function GraphTuckmanBase() {
            this.setupArea();
        }
        GraphTuckmanBase.prototype.setupArea = function () {
            this.startPoint = new Point_1.Point(0, 400);
            var zones = [
                new TuckmanZones_1.TuckmanZones("forming", 0, 200),
                new TuckmanZones_1.TuckmanZones("storming", 200, 200),
                new TuckmanZones_1.TuckmanZones("norming", 400, 200),
                new TuckmanZones_1.TuckmanZones("performing", 600, 200)
            ];
            var d3zones = d3.select("g#zones")
                .selectAll("rect")
                .data(zones);
            d3zones.enter().append("rect")
                .attr("x", 0)
                .attr("y", 400)
                .attr("class", "area")
                .attr("id", function (d) {
                return d.name;
            });
            this.forming = document.getElementById('forming');
            this.storming = document.getElementById('storming');
            this.norming = document.getElementById('norming');
            this.performing = document.getElementById('performing');
        };
        GraphTuckmanBase.prototype.hide = function () {
            console.log("HIDE comfortGRAPH");
            var d3zones = d3.select("g#zones")
                .selectAll("rect")
                .transition()
                .duration(1000)
                .attr("x", 0)
                .attr("width", 0);
            var d3drops = d3.select("#stage")
                .selectAll("circle.dropper")
                .transition()
                .delay(250)
                .duration(250)
                .attr("r", 0);
            return Timed_1.Timed.for(1000);
        };
        GraphTuckmanBase.prototype.showBase = function () {
            console.log("SHOW graph");
            var d3zones = d3.select("g#zones")
                .selectAll("rect")
                .attr("x", 0)
                .attr("width", 0)
                .transition()
                .duration(1000)
                .delay(function (d, i) { return i * 100; })
                .ease("elastic")
                .attr("x", function (d) {
                return d.left;
            })
                .attr("width", function (d) {
                return d.width;
            });
            return Timed_1.Timed.for(1000);
        };
        return GraphTuckmanBase;
    }());
    exports.GraphTuckmanBase = GraphTuckmanBase;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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UixRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNkLEtBQUssQ0FBQyxVQUFTLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUM7aUJBQ2YsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFTLENBQWM7Z0JBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2xCLENBQUMsQ0FBQztpQkFDRCxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVMsQ0FBYztnQkFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7WUFFWCxNQUFNLENBQUMsYUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzQixDQUFDO1FBRUwsdUJBQUM7SUFBRCxDQWhGQSxBQWdGQyxJQUFBO0lBaEZZLDRDQUFnQiIsImZpbGUiOiJHcmFwaFR1Y2ttYW5CYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUaW1lZH0gZnJvbSAnLi4vU2hhcmVkL1RpbWVkJztcbmltcG9ydCB7VHVja21hblpvbmVzfSBmcm9tICcuL1R1Y2ttYW5ab25lcyc7XG5pbXBvcnQge1BvaW50fSBmcm9tICcuLi9TaGFyZWQvUG9pbnQnO1xuXG5cbmV4cG9ydCBjbGFzcyBHcmFwaFR1Y2ttYW5CYXNlIHtcbiAgICBmb3JtaW5nIDogSFRNTEVsZW1lbnQ7XG4gICAgc3Rvcm1pbmcgOiBIVE1MRWxlbWVudDtcbiAgICBub3JtaW5nIDogSFRNTEVsZW1lbnQ7XG4gICAgcGVyZm9ybWluZyA6IEhUTUxFbGVtZW50O1xuICAgIHN0YXJ0UG9pbnQgOiBQb2ludDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zZXR1cEFyZWEoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQXJlYSAoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBuZXcgUG9pbnQoMCwgNDAwKTtcblxuICAgICAgICBjb25zdCB6b25lcyA9IFtcbiAgICAgICAgICAgIG5ldyBUdWNrbWFuWm9uZXMoXCJmb3JtaW5nXCIsIDAsIDIwMCksIFxuICAgICAgICAgICAgbmV3IFR1Y2ttYW5ab25lcyhcInN0b3JtaW5nXCIsIDIwMCwgMjAwKSwgXG4gICAgICAgICAgICBuZXcgVHVja21hblpvbmVzKFwibm9ybWluZ1wiLCA0MDAsIDIwMCksIFxuICAgICAgICAgICAgbmV3IFR1Y2ttYW5ab25lcyhcInBlcmZvcm1pbmdcIiwgNjAwLCAyMDApXG4gICAgICAgICAgICBdO1xuICAgICAgICBjb25zdCBkM3pvbmVzID0gZDMuc2VsZWN0KFwiZyN6b25lc1wiKVxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgICAgICAgIC5kYXRhKHpvbmVzKTtcblxuICAgICAgICBkM3pvbmVzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCA0MDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImFyZWFcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uKGQ6VHVja21hblpvbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG5cbiAgICAgICAgdGhpcy5mb3JtaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm1pbmcnKTtcbiAgICAgICAgdGhpcy5zdG9ybWluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9ybWluZycpO1xuICAgICAgICB0aGlzLm5vcm1pbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm9ybWluZycpO1xuICAgICAgICB0aGlzLnBlcmZvcm1pbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGVyZm9ybWluZycpO1xuICAgICAgICBcblxuICAgIH1cbiAgICBwdWJsaWMgaGlkZSgpOlRoZW5hYmxlPG51bWJlcj4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkhJREUgY29tZm9ydEdSQVBIXCIpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZDN6b25lcyA9IGQzLnNlbGVjdChcImcjem9uZXNcIikgICAgXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDApO1xuXG4gICAgICAgIGNvbnN0IGQzZHJvcHMgPSBkMy5zZWxlY3QoXCIjc3RhZ2VcIilcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGUuZHJvcHBlclwiKSAgIFxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgIC5kZWxheSgyNTApXG4gICAgICAgICAgICAgICAgLmR1cmF0aW9uKDI1MClcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMCk7XG4gICAgICAgIHJldHVybiBUaW1lZC5mb3IoMTAwMCk7XG4gICAgICAgICAgICAgICAgXG4gICAgfVxuICAgIHB1YmxpYyBzaG93QmFzZSgpOlRoZW5hYmxlPG51bWJlcj4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNIT1cgZ3JhcGhcIik7XG4gICAgICAgIGNvbnN0IGQzem9uZXMgPSBkMy5zZWxlY3QoXCJnI3pvbmVzXCIpXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gaSAqIDEwMDsgfSlcbiAgICAgICAgICAgICAgICAuZWFzZShcImVsYXN0aWNcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZDpUdWNrbWFuWm9uZXMpIHsgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmxlZnQ7IFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkOlR1Y2ttYW5ab25lcykgeyBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQud2lkdGg7IFxuICAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBUaW1lZC5mb3IoMTAwMCk7XG4gICAgICAgIFxuICAgIH1cblxufSJdfQ==
